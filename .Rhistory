mun$code_mun <- prefix(inp = mun$code_mun, len = 4, prefix = "0")
mun$code_dis <- prefix(inp = mun$code_dis, len = 2, prefix = "0")
setdiff(pg15$code_mun, mun$code_mun) # keine, i.O.
setdiff(mun$code_mun, pg15$code_mun) # keine, i.O.
colSums(mun[c("Einwohner15")]) # 2.921.920
colSums(mun[c("HH15")]) # 1.307.551
# ============================================================================= #
# Daten aufbereiten -----------------------------------------------------------
# EW / HH auf PG --------------------------------------------------------------
# ============================================================================= #
# Abgleich auf Gemeindeebene / Runden
pg_ew14 <- select(kk14_pg, code_pc5, code_mun, einwohner, haushalte)
base <-  align(pg_ew14, mun, "code_mun", "einwohner", "Einwohner15", var_new="ew15_abgl")
base <-  align(base, mun, "code_mun", "haushalte", "HH15", var_new="hh15_abgl")
base <- distr_round(base,ew15_abgl,code_mun, new_name = "ew_pg")
base <- distr_round(base,hh15_abgl,code_mun, new_name = "hh_pg")
colSums(base[c("ew_pg")]) # 2921920
colSums(base[c("hh_pg")]) # 1.307.551
base2 <- base
# gibt es nach Runden leere HH / EW ?
tmp <- subset(base2, hh_pg == 0 & ew_pg>0) # ja, 11
max(tmp$ew_pg) # max: 2 EW
# Annahmen: wenn EW, dann 1 HH (max 3 EW)
# wenn EW < HH, dann EW = HH
base2 <- base2 %>%
mutate(hh_pg = ifelse( hh_pg == 0 & ew_pg>0, 1, hh_pg),
hh_pg = ifelse( ew_pg < hh_pg, ew_pg, hh_pg))
colSums(base2[c("hh_pg")]) # zu viele
# neu abgleichen, runden
base2 <- align(base2, mun, "code_mun", "hh_pg", "HH15", var_new="hh_pg_abgl")
base2 <- distr_round(base2,hh_pg_abgl,code_mun, new_name = "hh_pg")
colSums(base2[c("hh_pg")]) # passt
# Test ob HH NA und EW nicht
tmp <- subset(base2, is.na(hh_pg) & ew_pg>0) # nein, 0
# Check DHH
base2$newdhh <- base2$ew_pg / base2$hh_pg
summary(base2$newdhh)
tmp <- subset(base2, newdhh <= 1.3 & ew_pg>10) # das sieht i.O. aus
tmp <- subset(base2, newdhh >= 4 & ew_pg>10) # 3, das sieht ok aus
# einwohner < haushalte?
tmp <- subset(base2, ew_pg<hh_pg ) # keine
# export ----
write.csv2(base2, "P:/MDR/04_Entwicklung/Standarddaten/International/Litauen/Kaufkraft/2015/basedata/pg_ewhh.csv")
# uebertragen auf PG
ergebnis <- merge(base2, mun[c("code_mun", "kki_15")], by = "code_mun",
all.x = TRUE)
ergebnis$kki_15 <- ifelse (ergebnis$ew_pg == 0, NA, ergebnis$kki_15)
ergebnis$kki_15 <- ergebnis$kki_15* 100/ weighted.mean(ergebnis$kki_15,
ergebnis$ew_pg)
ergebnis <- ergebnis[c("code_mun", "code_pc5",'ew_pg','hh_pg','kki_15')]
# ============================================================================ #
# 5. Finalisieren ----
# ============================================================================ #
dfExport <- add_pp_vars(ergebnis,'ew_pg','hh_pg','kki_15',5555, NA, NA)
tmp <- check_pp(dfExport)
## Tests für die KK
sum(dfExport[, c("kk_ew_index")]* dfExport$einwohner, na.rm = TRUE) /
sum(dfExport$einwohner, na.rm = TRUE)                                        # 100
sum(dfExport$kk_hh_index * dfExport$haushalte, na.rm = TRUE) /
sum(dfExport$haushalte, na.rm = TRUE)                                        # 100
sum(dfExport[, c("kk_ew")] * dfExport$einwohner, na.rm = TRUE) /
sum(dfExport$einwohner, na.rm = TRUE)                                        #
sum(dfExport$einwohner, na.rm = TRUE)                                          # 2.921.920
sum(dfExport$haushalte, na.rm = TRUE)                                          # 1.307.551
sum(dfExport$kk_summe, na.rm = TRUE)                                           #
sum(dfExport$kk_promille, na.rm = TRUE)                                        # 1000
sum(dfExport$einwohner_promille, na.rm = TRUE)                                 # 1000
sum(dfExport$haushalte_promille, na.rm = TRUE)                                 # 1000
tmp<- MDR::count_units(country = LT,
year = 12:15,
... = code_pc5, code_mun)
odbc.table('pp','kk12','akk_LT2012_g12d12_pg','read')
odbc.table('pp','kk13','akk_LT2013_g13d13_pg','read')
odbc.table('pp','kk14','akk_LT2014_g14d14_pg','read')
tmp2 <- as.data.frame( t( cbind(
lapply(kk12[c("einwohner", "haushalte")] , sum, na.rm=TRUE) ,
lapply(kk13[c("einwohner", "haushalte")] , sum, na.rm=TRUE) ,
lapply(kk14[c("einwohner", "haushalte")] , sum, na.rm=TRUE),
lapply(dfExport[c("einwohner", "haushalte")] , sum, na.rm=TRUE) )))
geom <- cbind(tmp, tmp2)
geom$einwohner <- as.integer(geom$einwohner)
geom$haushalte <- as.integer(geom$haushalte)
out <- select(mun, code_mun, name_mun = name_mun2, Einwohner14, Einwohner15,
Nettoeinkommen_I_14 ,Nettoeinkommen_II_14, kki_14,
kki_15 , diff, diff_prznt) %>%
arrange(desc(diff_prznt))
save(geom, out, file = paste0(pathout, "/doku.rdata"))
pathout
load(paste0(dir_ana, "doku.Rdata"))
library("knitr")
library("data.table")
library("dplyr")
library("xlsx")
library("lattice")
library("rgdal")
library("devtools")
library("zoo")
library("forecast")
library("RODBC")
# global options (can only be used after knitr was loaded)
opts_chunk$set(fig.align = "left", echo = FALSE)
# define directories
dir_main <- paste0("P:/MDR/04_Entwicklung/Standarddaten/International/",
"Litauen/Kaufkraft/2015/")
dir_ana <- paste0(dir_main, "Analyse/")
dir_ima <- paste0(dir_main, "Analyse/images/")
dir_code <- paste0(dir_main, "Analyse/code/")
dir_map <- "P:/MDR/05_EDV_Karten/Karten/Litauen/2015/Shapefiles/admin"
load(paste0(dir_ana, "doku.Rdata"))
xt <- format(geom, digits = 0, big.mark = " ")
xt <- xtable::xtable(xt, align = "rrrrrrr")
print(xt, type = "html",include.rownames=FALSE)
rm(list = ls())
ls()
# define directories
dir_main <- paste0("P:/MDR/04_Entwicklung/Standarddaten/International/",
"Litauen/Kaufkraft/2015/")
dir_ana <- paste0(dir_main, "Analyse/")
dir_ima <- paste0(dir_main, "Analyse/images/")
dir_code <- paste0(dir_main, "Analyse/code/")
dir_map <- "P:/MDR/05_EDV_Karten/Karten/Litauen/2015/Shapefiles/admin"
load(paste0(dir_ana, "doku.Rdata"))
xt <- format(geom, digits = 0, big.mark = " ")
rm(list = ls())
ls()
# Pfade
.libPaths("D:/R-project/Rpackages")
path <- "P:/MDR/04_Entwicklung/Standarddaten/International/Litauen/Kaufkraft/2015/"
path_ext <- "P:/Externe_Daten/International/Litauen/"
# path_cen <- "P:/Externe_Daten/International/Litauen/Flächen und Gebietsveränderungen/Regional/grid census 2011/R/"
# pathshp <-  "P:/MDR/05_EDV_Karten/Karten/Litauen/2015/Shapefiles/_PG/"
pathout <- "P:/MDR/04_Entwicklung/Standarddaten/International/Litauen/Kaufkraft/2015/Analyse/"
# Pakete und Funktionen laden
require("MDR")
require("RODBC")
require("dplyr")
#### Initialisierung
Initialise(sLk = "LT", sJahr = "2015", sGs = "2015", sEw = "01.01.2015")
# ============================================================================= #
# Daten laden -------------------------------------------------------------
# ============================================================================= #
# alte KK 14
odbc.table('pp','kk14_pg','akk_LT2014_g14d14_pg','read')
nrow(kk14_pg)  # 16542
# Zuordnungen
odbc.table('pp','pg15','Zuordnung_LT_g15','read')
pg15$code_pg <- paste("LT", pg15$code_mun, pg15$code_pc5, sep=".")
# Basedata laden
mun <- read.xls(paste0(path, "Basedata/Gemeinden 2015.xlsx"))
mun <- mun[2:61, ] # ohne erste/letzte Zeilen (Summen)
length(unique(pg15$code_mun)) # 60
# num -> character
mun$code_mun <- prefix(inp = mun$code_mun, len = 4, prefix = "0")
mun$code_dis <- prefix(inp = mun$code_dis, len = 2, prefix = "0")
setdiff(pg15$code_mun, mun$code_mun) # keine, i.O.
setdiff(mun$code_mun, pg15$code_mun) # keine, i.O.
colSums(mun[c("Einwohner15")]) # 2.921.920
colSums(mun[c("HH15")]) # 1.307.551
# ============================================================================= #
# Daten aufbereiten -----------------------------------------------------------
# EW / HH auf PG --------------------------------------------------------------
# ============================================================================= #
# Abgleich auf Gemeindeebene / Runden
pg_ew14 <- select(kk14_pg, code_pc5, code_mun, einwohner, haushalte)
base <-  align(pg_ew14, mun, "code_mun", "einwohner", "Einwohner15", var_new="ew15_abgl")
base <-  align(base, mun, "code_mun", "haushalte", "HH15", var_new="hh15_abgl")
base <- distr_round(base,ew15_abgl,code_mun, new_name = "ew_pg")
base <- distr_round(base,hh15_abgl,code_mun, new_name = "hh_pg")
colSums(base[c("ew_pg")]) # 2921920
colSums(base[c("hh_pg")]) # 1.307.551
base2 <- base
# gibt es nach Runden leere HH / EW ?
tmp <- subset(base2, hh_pg == 0 & ew_pg>0) # ja, 11
max(tmp$ew_pg) # max: 2 EW
# Annahmen: wenn EW, dann 1 HH (max 3 EW)
# wenn EW < HH, dann EW = HH
base2 <- base2 %>%
mutate(hh_pg = ifelse( hh_pg == 0 & ew_pg>0, 1, hh_pg),
hh_pg = ifelse( ew_pg < hh_pg, ew_pg, hh_pg))
colSums(base2[c("hh_pg")]) # zu viele
# neu abgleichen, runden
base2 <- align(base2, mun, "code_mun", "hh_pg", "HH15", var_new="hh_pg_abgl")
base2 <- distr_round(base2,hh_pg_abgl,code_mun, new_name = "hh_pg")
colSums(base2[c("hh_pg")]) # passt
# Test ob HH NA und EW nicht
tmp <- subset(base2, is.na(hh_pg) & ew_pg>0) # nein, 0
# Check DHH
base2$newdhh <- base2$ew_pg / base2$hh_pg
summary(base2$newdhh)
tmp <- subset(base2, newdhh <= 1.3 & ew_pg>10) # das sieht i.O. aus
tmp <- subset(base2, newdhh >= 4 & ew_pg>10) # 3, das sieht ok aus
# einwohner < haushalte?
tmp <- subset(base2, ew_pg<hh_pg ) # keine
# export ----
write.csv2(base2, "P:/MDR/04_Entwicklung/Standarddaten/International/Litauen/Kaufkraft/2015/basedata/pg_ewhh.csv")
# uebertragen auf PG
ergebnis <- merge(base2, mun[c("code_mun", "kki_15")], by = "code_mun",
all.x = TRUE)
ergebnis$kki_15 <- ifelse (ergebnis$ew_pg == 0, NA, ergebnis$kki_15)
ergebnis$kki_15 <- ergebnis$kki_15* 100/ weighted.mean(ergebnis$kki_15,
ergebnis$ew_pg)
ergebnis <- ergebnis[c("code_mun", "code_pc5",'ew_pg','hh_pg','kki_15')]
# ============================================================================ #
# 5. Finalisieren ----
# ============================================================================ #
dfExport <- add_pp_vars(ergebnis,'ew_pg','hh_pg','kki_15',5555, NA, NA)
tmp <- check_pp(dfExport)
## Tests für die KK
sum(dfExport[, c("kk_ew_index")]* dfExport$einwohner, na.rm = TRUE) /
sum(dfExport$einwohner, na.rm = TRUE)                                        # 100
sum(dfExport$kk_hh_index * dfExport$haushalte, na.rm = TRUE) /
sum(dfExport$haushalte, na.rm = TRUE)                                        # 100
sum(dfExport[, c("kk_ew")] * dfExport$einwohner, na.rm = TRUE) /
sum(dfExport$einwohner, na.rm = TRUE)                                        #
sum(dfExport$einwohner, na.rm = TRUE)                                          # 2.921.920
sum(dfExport$haushalte, na.rm = TRUE)                                          # 1.307.551
sum(dfExport$kk_summe, na.rm = TRUE)                                           #
sum(dfExport$kk_promille, na.rm = TRUE)                                        # 1000
sum(dfExport$einwohner_promille, na.rm = TRUE)                                 # 1000
sum(dfExport$haushalte_promille, na.rm = TRUE)                                 # 1000
tmp<- MDR::count_units(country = LT,
year = 12:15,
... = code_pc5, code_mun)
odbc.table('pp','kk12','akk_LT2012_g12d12_pg','read')
odbc.table('pp','kk13','akk_LT2013_g13d13_pg','read')
odbc.table('pp','kk14','akk_LT2014_g14d14_pg','read')
tmp2 <- as.data.frame( t( cbind(
lapply(kk12[c("einwohner", "haushalte")] , sum, na.rm=TRUE) ,
lapply(kk13[c("einwohner", "haushalte")] , sum, na.rm=TRUE) ,
lapply(kk14[c("einwohner", "haushalte")] , sum, na.rm=TRUE),
lapply(dfExport[c("einwohner", "haushalte")] , sum, na.rm=TRUE) )))
geom <- cbind(tmp, tmp2)
geom$einwohner <- as.integer(geom$einwohner)
geom$haushalte <- as.integer(geom$haushalte)
library("forecast", lib.loc="D:/R-project/Rpackages")
detach("package:forecast", unload=TRUE)
library("MDR", lib.loc="D:/Programme/R-3.2.0/library")
.libPaths("D:/Robert_R/Rpackages")
options(scipen = 999)
# load necessary R packages
library("knitr")
setwd("D:/Coursera/RepData_PeerAssessment1/")
.libPaths("D:/Robert_R/Rpackages")
options(scipen = 999)
# define directories
setwd("D:/Coursera/RepData_PeerAssessment1/")
library("knitr")
# global options (can only be used after knitr was loaded)
opts_chunk$set(fig.align = "center", echo = FALSE,
fig.retina = 10)
library("data.table")
library("dplyr")
data <- fread("activity.csv"), na.strings="NA" )
data <- fread("activity.csv", na.strings="NA" )
View(data)
hist(data$steps)
hist(data$steps,
xlab = "number of steps per day")
hist(data$steps,
main = "Histogram of the total number of steps taken each day"
xlab = "number of steps per day")
hist(data$steps,
main = "Histogram of the total number of steps taken each day",
xlab = "number of steps per day")
mean(data$steps, na.rm = TRUE)
median(data$steps, na.rm = TRUE)
View(data)
str(data)
# prepare data
data_acc <- data %>%
group_by(date) %>%
summarise(steps = sum(steps, na.rm = TRUE))
# make histogram
hist(data_acc$steps,
main = "Histogram of the total number of steps taken each day",
xlab = "number of steps per day")
# Mean and median number of steps taken each day
mean(data_acc$steps, na.rm = TRUE)
median(data_acc$steps, na.rm = TRUE)
data_acc2 <- data %>%
group_by(interval) %>%
summarise(steps = sum(steps, na.rm = TRUE))
plot(data_acc2$interval, data_acc2$steps,
main = "Time series plot of the average number of steps taken",
type = "l")
plot(data_acc2$interval, data_acc2$steps,
plot(data_acc2$interval, data_acc2$steps,
main = "Time series plot of the average number of steps taken",
xlab = "interval",
ylab = "number of steps",
type = "l")
filter(data_acc2, steps = max(data_acc2$steps))
max(data_acc2$steps)
filter(data_acc2, steps == max(data_acc2$steps))
835*5/60
60/5
835*12
835/12
View(data)
data2 <- data %>%
group_by(interval) %>%
mutate(imp = mean(steps, na.rm = TRUE)) %>%
ungroup() %>%
mutate(steps = ifelse(is.na(steps), imp, steps))
hist(data2$steps,
main = "Histogram of the total number of steps taken each day \\ imputed dataset",
xlab = "number of steps per day")
hist(data2$steps,
main = "Histogram of the total number of steps taken each day \n (imputed dataset)",
xlab = "number of steps per day")
data2 <- data2 %>%
mutate(date = as.POSIXlt(date))
library("lubridate")
data2 <- data %>%
group_by(interval) %>%
mutate(imp = mean(steps, na.rm = TRUE)) %>%
ungroup() %>%
mutate(steps = ifelse(is.na(steps), imp, steps))
data2 <- data2 %>%
mutate(date = ymd(date))
View(data2)
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wkd(date)
)
# indicator to data: weekend yes / no
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date)
)
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), 1, 0))
View(data2)
library("ggplot2")
ggplot(data2, aes(interval, steps)) +
geom_line() +
facet_grid(weekend ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) # lubridate sets Sun =1
ggplot(data2, aes(interval, steps)) +
geom_line() +
facet_grid(weekend ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
ggplot(data2, aes(interval, steps)) +
facet_grid(weekend ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
ggplot(data2, aes(interval, steps), color = weekend) +
# facet_grid(weekend ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
g <- ggplot(data = data2, aes(interval, steps, color = weekend))
g <- g + geom_line() +
xlab("interval") +
ylab("avarage number of steps")) +
ggtitle('Total Emissions in Baltimore City per Type ')
print(g)
g <- ggplot(data = data2, aes(interval, steps, color = weekend))
g <- g + geom_line() +
xlab("interval") +
ylab("avarage number of steps") +
ggtitle('Total Emissions in Baltimore City per Type ')
print(g)
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) %>% # lubridate sets Sun =1
order(weekend, interval)
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) %>% # lubridate sets Sun =1
order(weekend, interval)
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) %>% # lubridate sets Sun =1
order(weekend, interval)
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) %>%
order(weekend, interval)
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) %>%
sort(weekend, interval)
# indicator: weekend yes / no
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) %>%
sort(weekend, interval)
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) %>%
group_by(weekend, interval) %>%
summarise(steps = sum(steps, na.rm = TRUE))
View(data2)
g <- ggplot(data = data2, aes(interval, steps))
g <- g + geom_line() +
facet_grid(dateType ~ .) +
xlab("interval") +
ylab("avarage number of steps") +
ggtitle('Total Emissions in Baltimore City per Type ')
print(g)
g <- ggplot(data = data2, aes(interval, steps))
g <- g + geom_line() +
facet_grid(weekend ~ .) +
xlab("interval") +
ylab("avarage number of steps") +
ggtitle('Total Emissions in Baltimore City per Type ')
print(g)
g <- ggplot(data = data2, aes(interval, steps, color = weekend))
g <- g + geom_line() +
# facet_grid(weekend ~ .) +
xlab("interval") +
ylab("avarage number of steps") +
ggtitle('Total Emissions in Baltimore City per Type ')
print(g)
g <- ggplot(data = data2, aes(interval, steps, color = weekend))
g <- g + geom_line() +
xlab("interval") +
ylab("avarage number of steps") +
ggtitle('Average number of steps taken per 5-minute interval across weekdays and weekends ')
print(g)
length(is.na(data$steps))
sum(is.na(data$steps))
sum(is.na(data$steps))/nrow(data)
sum(is.na(data$steps))/nrow(data) *100
.libPaths("D:/Robert_R/Rpackages")
.libPaths("D:/Robert_R/Rpackages")
options(scipen = 999)
setwd("D:/Coursera/RepData_PeerAssessment1/")
pathfig <- ./fig
pathfig <- "D:/Coursera/RepData_PeerAssessment1/fig"
data <- fread("activity.csv", na.strings="NA" )
str(data)
# ok
library("knitr")
# global options (can only be used after knitr was loaded)
opts_chunk$set(fig.align = "center", echo = TRUE,
fig.retina = 10)
library("data.table")
library("dplyr")
library("lubridate")
library("ggplot2")
data <- fread("activity.csv", na.strings="NA" )
str(data)
data_acc <- data %>%
group_by(date) %>%
summarise(steps = sum(steps, na.rm = TRUE))
png(paste0(pathfig, "hist1.png"))
hist(data_acc$steps,
main = "Histogram of the total number of steps taken each day",
xlab = "number of steps per day")
dev.off()
pathfig <- "D:/Coursera/RepData_PeerAssessment1/fig/"
png(paste0(pathfig, "hist1.png"))
hist(data_acc$steps,
main = "Histogram of the total number of steps taken each day",
xlab = "number of steps per day")
dev.off()
data_acc2 <- data %>%
group_by(interval) %>%
summarise(steps = sum(steps, na.rm = TRUE))
png(paste0(pathfig, "ts1.png"))
plot(data_acc2$interval, data_acc2$steps,
main = "Time series plot of the average number of steps taken",
xlab = "interval",
ylab = "number of steps",
type = "l")
dev.off()
sum(is.na(data$steps))
# rate of missingsness (%)
sum(is.na(data$steps))/nrow(data) *100
# take average per interval to impute missing values
data2 <- data %>%
group_by(interval) %>%
mutate(imp = mean(steps, na.rm = TRUE)) %>%
ungroup() %>%
mutate(steps = ifelse(is.na(steps), imp, steps))
# Histogram of the total number of steps taken each day after missing values are imputed
png(paste0(pathfig, "hist2.png"))
hist(data2$steps,
main = "Histogram of the total number of steps taken each day \n (imputed dataset)",
xlab = "number of steps per day")
dev.off()
data2 <- data2 %>%
mutate(date = ymd(date),
weekend = wday(date),
weekend = ifelse(weekend %in% c(1,7), "weekend", "weekdays")) %>% # lubridate sets Sunday = 1
group_by(weekend, interval) %>%
summarise(steps = sum(steps, na.rm = TRUE))
# plot
png(paste0(pathfig, "ts2.png"))
g <- ggplot(data = data2, aes(interval, steps, color = weekend))
g <- g + geom_line() +
xlab("interval") +
ylab("avarage number of steps") +
ggtitle('Average number of steps taken \nper 5-minute interval across weekdays and weekends ')
print(g)
dev.off()
